package com.dragunov.entities;
import com.dragunov.*;
import com.dragunov.Maps;


import java.util.*;


//–¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ, –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Entities.Creature. –°—Ç—Ä–µ–º–∏—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–≤—É
//(Entities.Grass), –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É
//—Ç—Ä–∞–≤—ã, –ª–∏–±–æ –Ω–∞ –µ—ë –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ.
public class Herbivore extends Creature {

static Queue <Coordinates> qGrass = new LinkedList<>();
static List <Coordinates> visited = new ArrayList<>();
    public Herbivore (Coordinates coordinates, int speed, int hp) {
        super(coordinates, speed, hp, "üê≠");
    }
    public Herbivore(){}

    @Override
    public String toString() {
        return picture;
    }

    public void setQueueGrass(Maps maps, Herbivore herbivore){
        //–Ω–∞–π—Ç–∏ –≤–µ—Å—å —Å—ã—Ä –Ω–∞ –∫–∞—Ä—Ç–µ

        ArrayList <Coordinates> allGrass = Search.BFS(maps, "Grass", herbivore.getCoordinates());
        while (!allGrass.isEmpty()) {
            if ((maps.entities.get(allGrass.get(0)) instanceof Grass) && !(qGrass.contains(allGrass.get(0)))) {
                qGrass.add(allGrass.get(0));
                allGrass.remove(0);
            } else allGrass.remove(0);
        }
    }

   public Queue<Coordinates> possibleCoordinates (Maps maps, Herbivore herbivore) {
       Vertical[] verticals = Vertical.values();
       Coordinates herbivoreCrd = herbivore.getCoordinates();
       Coordinates posibleCoordinates = null;



       Coordinates target = qGrass.peek();  //qGrass - –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å—ã—Ä–∞ -> –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
       Queue<Coordinates> nextTurn = new LinkedList<>();  //—Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ

        //–ï—Å–ª–∏ –ê(0) —Å—ã—Ä–∞ –±–æ–ª—å—à–µ –ê(0) –º—ã—à–∏ & –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–±–ª–∞—Å—Ç–∏ ->
       //–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = A++(1)
       //If –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–µ–º–ª–µ–π || —Å—ã—Ä–æ–º -> –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
       //–í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ = A(0++) & –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–±–ª–∞—Å—Ç–∏
       //If –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ !—è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ–º –∏–ª–∏ –∫–∞–º–Ω–µ–º -> –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
       //–í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ = –ê(0--) & –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–±–ª–∞—Å—Ç–∏
       //If –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ !—è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ–º –∏–ª–∏ –∫–∞–º–Ω–µ–º -> –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞

       //–ü–æ–π—Ç–∏ –Ω–∞–ø—Ä–∞–≤–æ
       if ((target.getVertical().ordinal() > herbivoreCrd.getVertical().ordinal())
               && ((herbivoreCrd.getVertical().ordinal() + speed) != 8)) {
           posibleCoordinates = new Coordinates(herbivoreCrd.getHorizontal(),
                   verticals[herbivoreCrd.getVertical().ordinal() + speed]);
           if ((maps.entities.get(posibleCoordinates) instanceof Earth)
           || (maps.entities.get(posibleCoordinates) instanceof Grass)){
               nextTurn.add(posibleCoordinates);
               visited.add(posibleCoordinates);
           }

       }
        //–ü–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ –î–î–î
       if ((target.getVertical().ordinal() < herbivoreCrd.getVertical().ordinal())
               && ((herbivoreCrd.getVertical().ordinal() - speed) != -1)
               && !(visited.contains(posibleCoordinates))) {
           posibleCoordinates = new Coordinates(herbivoreCrd.getHorizontal(),
                   verticals[herbivoreCrd.getVertical().ordinal() - speed]);
           if ((maps.entities.get(posibleCoordinates) instanceof Earth)
                   || (maps.entities.get(posibleCoordinates) instanceof Grass)){
               nextTurn.add(posibleCoordinates);
               visited.add(posibleCoordinates);
           }
       }
       //–ü–æ–π—Ç–∏ –≤–Ω–∏–∑
       if ((target.getHorizontal() > herbivoreCrd.getHorizontal())
               && ((herbivoreCrd.getHorizontal() + speed) != 9)) {
           posibleCoordinates = new Coordinates(herbivoreCrd.getHorizontal() + speed,
                   verticals[herbivoreCrd.getVertical().ordinal()]);
           if ((maps.entities.get(posibleCoordinates) instanceof Earth)
                   || (maps.entities.get(posibleCoordinates) instanceof Grass)){
               nextTurn.add(posibleCoordinates);
               visited.add(posibleCoordinates);
           }
       }


       //–ü–æ–π—Ç–∏ –Ω–∞–≤–µ—Ä—Ö
       if ((target.getHorizontal() < herbivoreCrd.getHorizontal())
               && ((herbivoreCrd.getHorizontal() - speed) != 0)) {
           posibleCoordinates = new Coordinates(herbivoreCrd.getHorizontal() - speed,
                   verticals[herbivoreCrd.getVertical().ordinal()]);
           if ((maps.entities.get(posibleCoordinates) instanceof Earth)
                   || (maps.entities.get(posibleCoordinates) instanceof Grass)){
               nextTurn.add(posibleCoordinates);
               visited.add(posibleCoordinates);
           }
       }
       return nextTurn;
   }

    public void makeMove(Maps maps, Herbivore herbivore) {
        try {
        Coordinates target = qGrass.peek();  //qGrass - –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å—ã—Ä–∞ -> –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        Queue<Coordinates> nextTurn = possibleCoordinates(maps, herbivore);  //—Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ

            if (target.equals(nextTurn.peek())) {
            qGrass.poll();

        }


        maps.entities.remove(herbivore.getCoordinates());
        herbivore.setCoordinates(nextTurn.poll());
        maps.entities.put(herbivore.getCoordinates(), herbivore);
    } catch (NullPointerException e) {
            System.out.println("End");
        }
    }
}

/*
–ù—É–∂–Ω–æ —á–µ—Ä–µ–∑ BFS –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏
–æ—Ç –º—ã—à–∏ –¥–æ —Å—ã—Ä–∞.
–£—Å–ª–æ–≤–∏–µ –≤—ã—à–µ –≤—Å—Ç–∞–µ—Ç –≤ —Ç—É–ø–∏–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–∏.
–õ–∏–±–æ –¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã—Ä–æ–≤ –±–æ–ª—å—à–µ 2—É—Ö (–Ω–∏—á–µ–≥–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç).
–ù—É–∂–Ω–æ —á—Ç–æ–±—ã BFS –Ω–µ –º–æ–≥ —Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.
 */