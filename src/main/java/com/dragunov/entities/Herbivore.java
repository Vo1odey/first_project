package com.dragunov.entities;
import com.dragunov.*;
import com.dragunov.Maps;


import java.util.*;


//–¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ, –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Entities.Creature. –°—Ç—Ä–µ–º–∏—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–≤—É
//(Entities.Grass), –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É
//—Ç—Ä–∞–≤—ã, –ª–∏–±–æ –Ω–∞ –µ—ë –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ.
public class Herbivore extends Creature {

    public Herbivore (Coordinates coordinates, int speed, int hp) {
        super(coordinates, speed, hp, "üê≠");
    }
    public Herbivore(){}
    @Override
    public String toString() {
        return picture;
    }

    public void makeMove(Herbivore herbivore, Grass grass) {
        Coordinates hrbCrd = herbivore.getCoordinates();      //—Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤–∞

        Vertical[] upValues = Vertical.values();
        Coordinates node;


        Coordinates left = null;
        Coordinates right = null;
        Coordinates up = null;
        Coordinates down = null;

        List <Coordinates> fromCrd = new ArrayList<>();      //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –û–¢–ö–£–î–ê –º—ã –ø—Ä–∏—à–ª–∏
        List <Coordinates> visited = new ArrayList<>();    //–ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        Queue <Coordinates> qCrd = new LinkedList<>();     //–æ—á–µ—Ä–µ–¥—å —Å–ª–µ–¥—É—é—â–∏—Ö –∫ –ø–æ—Å–µ—â–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

        fromCrd.add(hrbCrd);        //–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = –û–¢–ö–£–î–ê
        qCrd.add(hrbCrd);

        while (!qCrd.isEmpty()) {

            node = qCrd.poll();

                if (node.equals(grass.getCoordinates())) {
                    System.out.println(node + "!!!");
                    System.out.println(fromCrd);
                }

            visited.add(node);

            //LEFT
            if ((node.getVertical().ordinal() - 1 != -1) && !(visited.contains(left))) {
                left = new Coordinates(node.getHorizontal() ,upValues[node.getVertical().ordinal() - 1]);
                qCrd.add(left);
                visited.add(left);

            }
            //RIGHT
            if ((node.getVertical().ordinal() + 1 != 8) && !(visited.contains(right))) {
                right = new Coordinates(node.getHorizontal() ,upValues[node.getVertical().ordinal() +1 ]);
                qCrd.add(right);
                visited.add(right);

            }
            //UP
            if ((node.getHorizontal() - 1 != 0) && !(visited.contains(up))) {
                up = new Coordinates(node.getHorizontal() - 1 ,upValues[node.getVertical().ordinal()]);
                qCrd.add(up);
                visited.add(up);

            }
            //DOWN
            if ((node.getHorizontal() + 1 != 9) && !(visited.contains(down))) {
                down = new Coordinates(node.getHorizontal() + 1 ,upValues[node.getVertical().ordinal()]);
                qCrd.add(down);
                visited.add(down);

            }
        }
    }
}
/*
BFS(start_node, goal_node) {
 for(all nodes i) visited[i] = false; // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –ø—É—Å—Ç
 queue.push(start_node);              // –Ω–∞—á–∏–Ω–∞—è —Å —É–∑–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
 while(! queue.empty() ) {            // –ø–æ–∫–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞
  node = queue.pop();                 // –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
  if(node == goal_node) {
   return true;                       // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª —Ü–µ–ª–µ–≤—ã–º
  }
  visited[node] = true;               // –ø–æ–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–æ–¥—É –ø–æ—Å–µ—â–µ–Ω–Ω–æ–π
  foreach(child in expand(node)) {    // –≤—Å–µ –ø—Ä–µ–µ–º–Ω–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞, ...
   if(visited[child] == false) {      // ... –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –ø–æ—Å–µ—â–µ–Ω—ã ...
    queue.push(child);                // ... –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏...
    visited[child] = true;            // ... –∏ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ
   }
  }
 }
 return false;                        // –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º
}
*/